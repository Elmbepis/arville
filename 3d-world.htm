<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Showroom - Animated Bones</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: Arial, sans-serif;
    }
    #info, #instructions, #loading {
      position: absolute;
      width: 100%;
      text-align: center;
      color: white;
      z-index: 10;
    }
    #info {
      top: 10px;
      background: rgba(0,0,0,0.5);
      padding: 5px;
    }
    #instructions {
      bottom: 20px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
    }
    #loading {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.7);
      padding: 20px;
      border-radius: 10px;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div id="info">3D Showroom | WASD: Move | Mouse: Look | R: Reset | ESC: Exit</div>
  <div id="instructions">Explore and approach the animated bones model</div>
  <div id="loading">Loading bones.glb...</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

  <script>
    let scene, camera, renderer, mixer, animatedModel;
    const clock = new THREE.Clock();
    const EYE_HEIGHT = 1.7;

    init();
    animate();

    function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, EYE_HEIGHT, 20);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x202020);
      document.body.appendChild(renderer.domElement);

      // --- Lighting: brighter & even ---
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
      hemiLight.position.set(0, 20, 0);
      scene.add(hemiLight);

      const ambient = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambient);

      const dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
      dirLight.position.set(5, 10, 7.5);
      dirLight.castShadow = true;
      scene.add(dirLight);

      // --- Room setup ---
      const roomSize = 50;
      const wallHeight = 10;

      const floorMat = new THREE.MeshStandardMaterial({ color: 0x555555, roughness: 0.3 });
      const floor = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, roomSize), floorMat);
      floor.rotation.x = -Math.PI / 2;
      scene.add(floor);

      const wallMat = new THREE.MeshStandardMaterial({ color: 0xaaaaaa, roughness: 0.6 });
      const backWall = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, wallHeight), wallMat);
      backWall.position.set(0, wallHeight / 2, -roomSize / 2);
      scene.add(backWall);

      const leftWall = backWall.clone();
      leftWall.rotation.y = Math.PI / 2;
      leftWall.position.set(-roomSize / 2, wallHeight / 2, 0);
      scene.add(leftWall);

      const rightWall = backWall.clone();
      rightWall.rotation.y = -Math.PI / 2;
      rightWall.position.set(roomSize / 2, wallHeight / 2, 0);
      scene.add(rightWall);

      const ceiling = new THREE.Mesh(
        new THREE.PlaneGeometry(roomSize, roomSize),
        new THREE.MeshStandardMaterial({ color: 0xdddddd, roughness: 0.9 })
      );
      ceiling.rotation.x = Math.PI / 2;
      ceiling.position.y = wallHeight;
      scene.add(ceiling);

      // --- Load bones.glb ---
      const loader = new THREE.GLTFLoader();
      loader.load(
        "AR/models/horror/bones.glb",
        (gltf) => {
          animatedModel = gltf.scene;
          animatedModel.position.set(0, 0, 0);
          animatedModel.scale.set(6, 6, 6);
          animatedModel.updateMatrixWorld(true);
          scene.add(animatedModel);

          // Animate all clips sequentially and loop forever
          if (gltf.animations && gltf.animations.length > 0) {
            mixer = new THREE.AnimationMixer(animatedModel);
            const clips = gltf.animations;
            let currentIndex = 0;

            const playNext = () => {
              const clip = clips[currentIndex];
              const action = mixer.clipAction(clip);
              action.reset();
              action.play();
              action.clampWhenFinished = true;
              action.loop = THREE.LoopOnce;

              mixer.addEventListener('finished', () => {
                currentIndex = (currentIndex + 1) % clips.length;
                playNext();
              });
            };
            playNext();
          }

          document.getElementById("loading").style.display = "none";
          console.log("&#9989; bones.glb loaded and animated");
        },
        (xhr) => {
          if (xhr.lengthComputable) {
            const percent = (xhr.loaded / xhr.total) * 100;
            document.getElementById("loading").textContent = `Loading bones.glb... ${percent.toFixed(1)}%`;
          }
        },
        (error) => {
          console.error("&#10060; Error loading bones.glb:", error);
          document.getElementById("loading").textContent = "Failed to load bones.glb";
        }
      );

      setupControls();
      window.addEventListener("resize", onWindowResize);

      // --- Exit page on ESC key ---
      document.addEventListener("keydown", (e) => {
        if (e.code === "Escape") {
          window.location.href = "about:blank"; // Change this to another URL if desired
        }
      });
    }

    // --- Smooth fine-grained movement controls ---
    function setupControls() {
      const moveState = { forward: false, backward: false, left: false, right: false };
      const velocity = new THREE.Vector3();
      const direction = new THREE.Vector3();
      let yaw = 0;
      let isMouseDown = false;
      let previousMouseX = 0;

      const moveSpeed = 0.03; // Fine movement speed

      document.addEventListener("mousedown", (e) => {
        isMouseDown = true;
        previousMouseX = e.clientX;
      });
      document.addEventListener("mouseup", () => (isMouseDown = false));

      document.addEventListener("mousemove", (e) => {
        if (!isMouseDown) return;
        const deltaX = e.clientX - previousMouseX;
        previousMouseX = e.clientX;
        yaw -= deltaX * 0.002; // smoother turning
        camera.rotation.y = yaw;
      });

      document.addEventListener("keydown", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = true; break;
          case "KeyW": moveState.backward = true; break;
          case "KeyD": moveState.left = true; break;
          case "KeyA": moveState.right = true; break;
          case "KeyR": resetCamera(); break;
        }
      });
      document.addEventListener("keyup", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = false; break;
          case "KeyW": moveState.backward = false; break;
          case "KeyD": moveState.left = false; break;
          case "KeyA": moveState.right = false; break;
        }
      });

      function resetCamera() {
        camera.position.set(0, EYE_HEIGHT, 20);
        camera.rotation.set(0, 0, 0);
        yaw = 0;
        velocity.set(0, 0, 0);
      }

      camera.userData.update = function () {
        velocity.x -= velocity.x * 0.15;
        velocity.z -= velocity.z * 0.15;

        direction.z = Number(moveState.forward) - Number(moveState.backward);
        direction.x = Number(moveState.right) - Number(moveState.left);
        direction.normalize();

        if (moveState.forward || moveState.backward) velocity.z -= direction.z * moveSpeed;
        if (moveState.left || moveState.right) velocity.x -= direction.x * moveSpeed;

        const forward = new THREE.Vector3(0, 0, -1).applyQuaternion(camera.quaternion);
        const right = new THREE.Vector3(1, 0, 0).applyQuaternion(camera.quaternion);
        forward.y = 0; right.y = 0;
        forward.normalize(); right.normalize();

        camera.position.add(forward.multiplyScalar(velocity.z));
        camera.position.add(right.multiplyScalar(velocity.x));
        camera.position.y = EYE_HEIGHT;
      };
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      if (mixer) mixer.update(delta);
      if (camera.userData.update) camera.userData.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>
