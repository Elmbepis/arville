<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fixed Animation Extractor</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        button { padding: 10px 20px; margin: 10px; }
        .status { margin: 10px 0; padding: 10px; }
        .success { background: #d4edda; }
        .error { background: #f8d7da; }
        .info { background: #d1ecf1; }
    </style>
</head>
<body>
    <h1>Fixed Animation Extractor</h1>
    <button id="extractBtn">Extract Animations from girl.glb</button>
    <div id="status"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        class FixedAnimationExtractor {
            constructor() {
                this.loader = new THREE.GLTFLoader();
                this.statusEl = document.getElementById('status');
                this.extractBtn = document.getElementById('extractBtn');
                
                this.extractBtn.addEventListener('click', () => this.extractAnimations());
            }

            setStatus(message, type = 'info') {
                this.statusEl.innerHTML = `<div class="status ${type}">${message}</div>`;
            }

            downloadJSON(data, filename) {
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }

            createAnimationGLTF(animationClip) {
                // Create a proper GLTF structure with animation
                return {
                    asset: {
                        version: "2.0",
                        generator: "THREE.GLTFExporter"
                    },
                    scenes: [{
                        nodes: [0]
                    }],
                    scene: 0,
                    nodes: [{
                        name: "AnimationRoot"
                    }],
                    animations: [{
                        name: animationClip.name,
                        channels: animationClip.tracks.map(track => {
                            const path = track.name.split('.')[1]; // position, rotation, or scale
                            const nodeIndex = 0; // Always target the root node
                            return {
                                sampler: track.name,
                                target: {
                                    node: nodeIndex,
                                    path: path
                                }
                            };
                        }),
                        samplers: animationClip.tracks.map(track => ({
                            input: track.times,
                            output: track.values,
                            interpolation: "LINEAR"
                        }))
                    }]
                };
            }

            async extractAnimations() {
                this.extractBtn.disabled = true;
                this.setStatus('Loading girl.glb...', 'info');

                try {
                    const gltf = await new Promise((resolve, reject) => {
                        this.loader.load('/arville/AR/scratch/girl.glb', resolve, null, reject);
                    });

                    if (!gltf.animations || gltf.animations.length === 0) {
                        this.setStatus('No animations found in girl.glb', 'error');
                        return;
                    }

                    this.setStatus(`Found ${gltf.animations.length} animations. Extracting...`, 'info');

                    for (let i = 0; i < gltf.animations.length; i++) {
                        const clip = gltf.animations[i];
                        const animationName = clip.name || `animation_${i + 1}`;
                        const safeName = animationName.replace(/[^a-z0-9]/gi, '_').toLowerCase();
                        
                        // Convert Three.js AnimationClip to raw animation data
                        const animationData = {
                            name: clip.name,
                            duration: clip.duration,
                            tracks: clip.tracks.map(track => ({
                                name: track.name,
                                times: Array.from(track.times),
                                values: Array.from(track.values),
                                type: track.ValueTypeName
                            }))
                        };

                        // Save as JSON file
                        this.downloadJSON(animationData, `animations/${safeName}.json`);
                        
                        this.setStatus(`Extracted: ${animationName}`, 'info');
                    }

                    this.setStatus(`&#9989; Successfully extracted ${gltf.animations.length} animations as JSON files!`, 'success');

                } catch (error) {
                    this.setStatus(`&#10060; Error: ${error.message}`, 'error');
                } finally {
                    this.extractBtn.disabled = false;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new FixedAnimationExtractor();
        });
    </script>
</body>
</html>