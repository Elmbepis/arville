<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Virtual Exhibit Hall</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: Arial, sans-serif;
    }
    #info, #instructions {
      position: absolute;
      width: 100%;
      text-align: center;
      color: white;
      z-index: 10;
    }
    #info {
      top: 10px;
      background: rgba(0,0,0,0.5);
      padding: 5px;
    }
    #instructions {
      bottom: 20px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
    }
    #loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 20px;
      border-radius: 10px;
      z-index: 100;
    }
  </style>
</head>
<body>
  <div id="info">Virtual Exhibit Hall | WASD: Move | Mouse: Look Around | R: Reset Position</div>
  <div id="instructions">Loading exhibit hall...</div>
  <div id="loading">Loading booths...</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <script>
    let scene, camera, renderer;
    const clock = new THREE.Clock();
    const EYE_HEIGHT = 1.7;
    let currentBooths = [];

// Define all possible booth positions for 40x90 room - 4 booths per side
const BOOTH_POSITIONS = {
  '1': new THREE.Vector3(-15, 0, -30),  // Left side, back
  '2': new THREE.Vector3(-15, 0, -10),  // Left side, mid-back
  '3': new THREE.Vector3(-15, 0, 10),   // Left side, mid-front
  '4': new THREE.Vector3(-15, 0, 30),   // Left side, front
  
  '5': new THREE.Vector3(15, 0, -30),   // Right side, back
  '6': new THREE.Vector3(15, 0, -10),   // Right side, mid-back
  '7': new THREE.Vector3(15, 0, 10),    // Right side, mid-front
  '8': new THREE.Vector3(15, 0, 30)     // Right side, front
};

// Simple function to get all booth IDs - no file checking
function getAvailableBooths() {
  return ['1', '2', '3', '4', '5', '6', '7', '8'];
}

    init();
    animate();

    function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, EYE_HEIGHT, 5);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x202020);
      document.body.appendChild(renderer.domElement);

      // Lighting
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
      hemiLight.position.set(0, 20, 0);
      scene.add(hemiLight);

      const ambient = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambient);

      const dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
      dirLight.position.set(5, 10, 7.5);
      scene.add(dirLight);

      // First load obj_create, then create room and load booths
      loadObjectCreator().then(() => {
        createRoom(); // Moved here to ensure textureLoader exists
        loadBooths();
      });

      setupControls();
      window.addEventListener("resize", onWindowResize);
    }

    function createRoom() {
      const roomWidth = 40;
      const roomDepth = 90;
      const wallHeight = 10;

      // Floor - with texture using the initialized textureLoader
      let floorMat;
      if (textureLoader) {
        const floorTexture = textureLoader.load('./textures/hall-floor.jpg');
        floorTexture.wrapS = THREE.RepeatWrapping;
        floorTexture.wrapT = THREE.RepeatWrapping;
        floorTexture.repeat.set(8, 18);
        
        floorMat = new THREE.MeshStandardMaterial({ 
          map: floorTexture,
          roughness: 0.3 
        });
      } else {
        // Fallback if textureLoader not available
        floorMat = new THREE.MeshStandardMaterial({ 
          color: 0x555555, 
          roughness: 0.3 
        });
      }

      const floor = new THREE.Mesh(new THREE.PlaneGeometry(roomWidth, roomDepth), floorMat);
      floor.rotation.x = -Math.PI / 2;
      scene.add(floor);

      // Walls
      const wallMat = new THREE.MeshStandardMaterial({ color: 0xaaaaaa, roughness: 0.6 });
      
      // Back wall (shorter - 40 units wide)
      const backWall = new THREE.Mesh(new THREE.PlaneGeometry(roomWidth, wallHeight), wallMat);
      backWall.position.set(0, wallHeight / 2, -roomDepth / 2);
      scene.add(backWall);

      // Front wall (shorter - 40 units wide)
      const frontWall = new THREE.Mesh(new THREE.PlaneGeometry(roomWidth, wallHeight), wallMat);
      frontWall.position.set(0, wallHeight / 2, roomDepth / 2);
      frontWall.rotation.y = Math.PI; // Face inward
      scene.add(frontWall);

      // Left wall (longer - 90 units wide)
      const leftWall = new THREE.Mesh(new THREE.PlaneGeometry(roomDepth, wallHeight), wallMat);
      leftWall.rotation.y = Math.PI / 2;
      leftWall.position.set(-roomWidth / 2, wallHeight / 2, 0);
      scene.add(leftWall);

      // Right wall (longer - 90 units wide)
      const rightWall = new THREE.Mesh(new THREE.PlaneGeometry(roomDepth, wallHeight), wallMat);
      rightWall.rotation.y = -Math.PI / 2;
      rightWall.position.set(roomWidth / 2, wallHeight / 2, 0);
      scene.add(rightWall);

      // Ceiling - now 40x90
      const ceiling = new THREE.Mesh(
        new THREE.PlaneGeometry(roomWidth, roomDepth),
        new THREE.MeshStandardMaterial({ color: 0xdddddd, roughness: 0.9 })
      );
      ceiling.rotation.x = Math.PI / 2;
      ceiling.position.y = wallHeight;
      scene.add(ceiling);
    }

function loadObjectCreator() {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = 'obj_create.js?v=' + Date.now(); // Use current timestamp
    script.onload = function() {
      // Initialize texture loader AFTER obj_create.js is loaded
      const textureLoader = new THREE.TextureLoader();
      if (window.initObjectTextures) {
        window.initObjectTextures(textureLoader);
      }
      resolve();
    };
    script.onerror = reject;
    document.head.appendChild(script);
  });
}

    async function loadBooths() {
      const loadingDiv = document.getElementById('loading');
      
      // Get all booth IDs
      const boothIds = getAvailableBooths();
      const loadedBooths = [];
      
      loadingDiv.textContent = `Loading ${boothIds.length} booth locations...`;
      
      // Try to load each booth
      for (const boothId of boothIds) {
        loadingDiv.textContent = `Loading booth ${boothId}...`;
        try {
          await loadBoothContent(boothId);
          loadedBooths.push(boothId);
        } catch (error) {
          // Booth file doesn't exist - create empty space
          console.log(`Booth ${boothId} not available - leaving empty`);
        }
      }
      
      loadingDiv.style.display = 'none';
      document.getElementById('instructions').textContent = 
        `Loaded ${loadedBooths.length} booth(s) | Use WASD to move and mouse to look around`;
    }

    async function loadBoothContent(boothId) {
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = `booth${boothId}.js`;
        
        script.onload = () => {
          // Position the booth in the hall
          positionBooth(boothId);
          currentBooths.push(boothId);
          console.log(`&#9989; Booth ${boothId} loaded successfully`);
          resolve();
        };
        
        script.onerror = () => {
          reject(new Error(`Booth ${boothId} file not found`));
        };
        
        document.head.appendChild(script);
      });
    }

    function positionBooth(boothId) {
      const boothGroup = scene.getObjectByName(`booth-${boothId}`);
      if (boothGroup && BOOTH_POSITIONS[boothId]) {
        boothGroup.position.copy(BOOTH_POSITIONS[boothId]);
      }
    }

    // --- Updated Movement controls with up-down tilt ---
    function setupControls() {
      const moveState = { forward: false, backward: false, left: false, right: false };
      const velocity = new THREE.Vector3();
      const direction = new THREE.Vector3();
      let yaw = 0;
      let pitch = 0;
      let isMouseDown = false;
      let previousMouseX = 0;
      let previousMouseY = 0;

      const moveSpeed = 0.03;
      const MAX_PITCH = 15 * (Math.PI / 180);

      document.addEventListener("mousedown", (e) => {
        isMouseDown = true;
        previousMouseX = e.clientX;
        previousMouseY = e.clientY;
      });
      document.addEventListener("mouseup", () => (isMouseDown = false));

      document.addEventListener("mousemove", (e) => {
        if (!isMouseDown) return;
        
        const deltaX = e.clientX - previousMouseX;
        const deltaY = e.clientY - previousMouseY;
        
        previousMouseX = e.clientX;
        previousMouseY = e.clientY;
        
        // Horizontal rotation (yaw)
        yaw -= deltaX * 0.002;
        
        // Vertical rotation (pitch) with limits
        pitch -= deltaY * 0.002;
        pitch = Math.max(-MAX_PITCH, Math.min(MAX_PITCH, pitch));
        
        // Apply rotations to camera
        camera.rotation.set(pitch, yaw, 0, 'YXZ');
      });

      document.addEventListener("keydown", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = true; break;
          case "KeyW": moveState.backward = true; break;
          case "KeyD": moveState.left = true; break;
          case "KeyA": moveState.right = true; break;
          case "KeyR": resetCamera(); break;
        }
      });
      document.addEventListener("keyup", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = false; break;
          case "KeyW": moveState.backward = false; break;
          case "KeyD": moveState.left = false; break;
          case "KeyA": moveState.right = false; break;
        }
      });

      function resetCamera() {
        camera.position.set(0, EYE_HEIGHT, 5);
        camera.rotation.set(0, 0, 0);
        yaw = 0;
        pitch = 0;
        velocity.set(0, 0, 0);
      }

      camera.userData.update = function () {
        velocity.x -= velocity.x * 0.25;
        velocity.z -= velocity.z * 0.25;

        direction.z = Number(moveState.forward) - Number(moveState.backward);
        direction.x = Number(moveState.right) - Number(moveState.left);
        direction.normalize();

        if (moveState.forward || moveState.backward) velocity.z -= direction.z * moveSpeed;
        if (moveState.left || moveState.right) velocity.x -= direction.x * moveSpeed;

        const forward = new THREE.Vector3(0, 0, -1).applyQuaternion(camera.quaternion);
        const right = new THREE.Vector3(1, 0, 0).applyQuaternion(camera.quaternion);
        forward.y = 0; right.y = 0;
        forward.normalize(); right.normalize();

        camera.position.add(forward.multiplyScalar(velocity.z));
        camera.position.add(right.multiplyScalar(velocity.x));
        camera.position.y = EYE_HEIGHT;
      };
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      if (camera.userData.update) camera.userData.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>