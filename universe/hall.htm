<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Virtual Exhibit Hall</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: Arial, sans-serif;
    }
    #info, #instructions {
      position: absolute;
      width: 100%;
      text-align: center;
      color: white;
      z-index: 10;
    }
    #info {
      top: 10px;
      background: rgba(0,0,0,0.5);
      padding: 5px;
    }
    #instructions {
      bottom: 20px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
    }
    #loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 20px;
      border-radius: 10px;
      z-index: 100;
    }
  </style>
</head>
<body>
  <div id="info">Virtual Exhibit Hall | WASD: Move | Mouse: Look Around | R: Reset Position</div>
  <div id="instructions">Loading exhibit hall...</div>
  <div id="loading">Loading booths...</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <script>
    let scene, camera, renderer;
    const clock = new THREE.Clock();
    const EYE_HEIGHT = 1.7;
    let currentBooths = [];

    // Get booths from URL parameters
    function getBoothsFromURL() {
      const urlParams = new URLSearchParams(window.location.search);
      const boothsParam = urlParams.get('booths');
      
      if (!boothsParam) {
        return ['1']; // Default to booth 1
      }
      
      return boothsParam.split(',').map(b => b.trim());
    }

    init();
    animate();

    function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, EYE_HEIGHT, 5);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x202020);
      document.body.appendChild(renderer.domElement);

      // Lighting
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
      hemiLight.position.set(0, 20, 0);
      scene.add(hemiLight);

      const ambient = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambient);

      const dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
      dirLight.position.set(5, 10, 7.5);
      scene.add(dirLight);

      // Create room
      createRoom();
      
      // First load obj_create, then load booths
      loadObjectCreator().then(() => {
        loadBooths();
      });

      setupControls();
      window.addEventListener("resize", onWindowResize);
    }

    function createRoom() {
      const roomSize = 50;
      const wallHeight = 10;

      // Floor
      const floorMat = new THREE.MeshStandardMaterial({ color: 0x555555, roughness: 0.3 });
      const floor = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, roomSize), floorMat);
      floor.rotation.x = -Math.PI / 2;
      scene.add(floor);

      // Walls
      const wallMat = new THREE.MeshStandardMaterial({ color: 0xaaaaaa, roughness: 0.6 });
      
      const backWall = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, wallHeight), wallMat);
      backWall.position.set(0, wallHeight / 2, -roomSize / 2);
      scene.add(backWall);

      const leftWall = backWall.clone();
      leftWall.rotation.y = Math.PI / 2;
      leftWall.position.set(-roomSize / 2, wallHeight / 2, 0);
      scene.add(leftWall);

      const rightWall = backWall.clone();
      rightWall.rotation.y = -Math.PI / 2;
      rightWall.position.set(roomSize / 2, wallHeight / 2, 0);
      scene.add(rightWall);

      // Ceiling
      const ceiling = new THREE.Mesh(
        new THREE.PlaneGeometry(roomSize, roomSize),
        new THREE.MeshStandardMaterial({ color: 0xdddddd, roughness: 0.9 })
      );
      ceiling.rotation.x = Math.PI / 2;
      ceiling.position.y = wallHeight;
      scene.add(ceiling);
    }

    function loadObjectCreator() {
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'obj_create.js'; // FIXED: Changed from .htm to .js
        script.onload = function() {
          // Initialize texture loader AFTER obj_create.js is loaded
          const textureLoader = new THREE.TextureLoader();
          if (window.initObjectTextures) {
            window.initObjectTextures(textureLoader);
          }
          resolve();
        };
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }

    async function loadBooths() {
      const boothIds = getBoothsFromURL();
      const loadingDiv = document.getElementById('loading');
      
      for (const boothId of boothIds) {
        loadingDiv.textContent = `Loading booth ${boothId}...`;
        await loadBoothContent(boothId);
      }
      
      loadingDiv.style.display = 'none';
      document.getElementById('instructions').textContent = 
        `Loaded booths: ${boothIds.join(', ')} | Use WASD to move and mouse to look around`;
    }

    async function loadBoothContent(boothId) {
      try {
        // Create script element to load booth content
        const script = document.createElement('script');
        script.src = `booth${boothId}.js`; // FIXED: Changed from .htm to .js
        
        await new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });

        // Position the booth in the hall
        positionBooth(boothId);
        
        currentBooths.push(boothId);
        console.log(`&#9989; Booth ${boothId} loaded successfully`);
        
      } catch (error) {
        console.error(`&#10060; Failed to load booth ${boothId}:`, error);
        createFallbackBooth(boothId);
      }
    }

    function positionBooth(boothId) {
      // Position booths around the hall
      const positions = {
        '1': new THREE.Vector3(-15, 0, -15),
        '2': new THREE.Vector3(15, 0, -15),
        '3': new THREE.Vector3(-15, 0, 15),
        '4': new THREE.Vector3(15, 0, 15),
        '5': new THREE.Vector3(0, 0, -20),
        '6': new THREE.Vector3(-20, 0, 0),
        '7': new THREE.Vector3(20, 0, 0),
        '8': new THREE.Vector3(0, 0, 20)
      };

      const boothGroup = scene.getObjectByName(`booth-${boothId}`);
      if (boothGroup && positions[boothId]) {
        boothGroup.position.copy(positions[boothId]);
      }
    }

    function createFallbackBooth(boothId) {
      const fallbackGroup = new THREE.Group();
      fallbackGroup.name = `booth-${boothId}`;
      
      const geometry = new THREE.BoxGeometry(4, 2, 4);
      const material = new THREE.MeshStandardMaterial({ 
        color: 0xff0000,
        wireframe: true 
      });
      const cube = new THREE.Mesh(geometry, material);
      
      fallbackGroup.add(cube);
      scene.add(fallbackGroup);
      positionBooth(boothId);
      
      currentBooths.push(boothId);
    }

    // --- Updated Movement controls with up-down tilt ---
    function setupControls() {
      const moveState = { forward: false, backward: false, left: false, right: false };
      const velocity = new THREE.Vector3();
      const direction = new THREE.Vector3();
      let yaw = 0;
      let pitch = 0;
      let isMouseDown = false;
      let previousMouseX = 0;
      let previousMouseY = 0;

      const moveSpeed = 0.03;
      const MAX_PITCH = 15 * (Math.PI / 180); // 20 degrees in radians

      document.addEventListener("mousedown", (e) => {
        isMouseDown = true;
        previousMouseX = e.clientX;
        previousMouseY = e.clientY;
      });
      document.addEventListener("mouseup", () => (isMouseDown = false));

      document.addEventListener("mousemove", (e) => {
        if (!isMouseDown) return;
        
        const deltaX = e.clientX - previousMouseX;
        const deltaY = e.clientY - previousMouseY;
        
        previousMouseX = e.clientX;
        previousMouseY = e.clientY;
        
        // Horizontal rotation (yaw)
        yaw -= deltaX * 0.002;
        
        // Vertical rotation (pitch) with limits
        pitch -= deltaY * 0.002;
        pitch = Math.max(-MAX_PITCH, Math.min(MAX_PITCH, pitch)); // Clamp to ±20 degrees
        
        // Apply rotations to camera
        camera.rotation.set(pitch, yaw, 0, 'YXZ');
      });

      document.addEventListener("keydown", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = true; break;
          case "KeyW": moveState.backward = true; break;
          case "KeyD": moveState.left = true; break;
          case "KeyA": moveState.right = true; break;
          case "KeyR": resetCamera(); break;
        }
      });
      document.addEventListener("keyup", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = false; break;
          case "KeyW": moveState.backward = false; break;
          case "KeyD": moveState.left = false; break;
          case "KeyA": moveState.right = false; break;
        }
      });

      function resetCamera() {
        camera.position.set(0, EYE_HEIGHT, 5);
        camera.rotation.set(0, 0, 0);
        yaw = 0;
        pitch = 0;
        velocity.set(0, 0, 0);
      }

      camera.userData.update = function () {
        velocity.x -= velocity.x * 0.25;
        velocity.z -= velocity.z * 0.25;

        direction.z = Number(moveState.forward) - Number(moveState.backward);
        direction.x = Number(moveState.right) - Number(moveState.left);
        direction.normalize();

        if (moveState.forward || moveState.backward) velocity.z -= direction.z * moveSpeed;
        if (moveState.left || moveState.right) velocity.x -= direction.x * moveSpeed;

        const forward = new THREE.Vector3(0, 0, -1).applyQuaternion(camera.quaternion);
        const right = new THREE.Vector3(1, 0, 0).applyQuaternion(camera.quaternion);
        forward.y = 0; right.y = 0;
        forward.normalize(); right.normalize();

        camera.position.add(forward.multiplyScalar(velocity.z));
        camera.position.add(right.multiplyScalar(velocity.x));
        camera.position.y = EYE_HEIGHT;
      };
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      if (camera.userData.update) camera.userData.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>