<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Showroom - Bones with Vamp Animations</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: Arial, sans-serif;
    }
    #info, #instructions, #loading {
      position: absolute;
      width: 100%;
      text-align: center;
      color: white;
      z-index: 10;
    }
    #info {
      top: 10px;
      background: rgba(0,0,0,0.5);
      padding: 5px;
    }
    #instructions {
      bottom: 20px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
    }
    #loading {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.7);
      padding: 20px;
      border-radius: 10px;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div id="info">3D Showroom | WASD: Move | Mouse: Look | R: Reset | ESC: Exit | 1-9: Change Animation</div>
  <div id="instructions">Explore and approach the animated bones model</div>
  <div id="loading">Loading vamp.glb animations...</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

  <script>
    let scene, camera, renderer, mixer, animatedModel;
    const clock = new THREE.Clock();
    const EYE_HEIGHT = 1.7;
    
    // Animation management
    let animationClips = [];
    let currentAction = null;
    let animationNames = [];

    init();
    animate();

    function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, EYE_HEIGHT, 5); // Closer camera

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x202020);
      document.body.appendChild(renderer.domElement);

      // --- Lighting: brighter & even ---
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
      hemiLight.position.set(0, 20, 0);
      scene.add(hemiLight);

      const ambient = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambient);

      const dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
      dirLight.position.set(5, 10, 7.5);
      dirLight.castShadow = true;
      scene.add(dirLight);

      // --- Room setup ---
      const roomSize = 50;
      const wallHeight = 10;

      const floorMat = new THREE.MeshStandardMaterial({ color: 0x555555, roughness: 0.3 });
      const floor = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, roomSize), floorMat);
      floor.rotation.x = -Math.PI / 2;
      scene.add(floor);

      const wallMat = new THREE.MeshStandardMaterial({ color: 0xaaaaaa, roughness: 0.6 });
      const backWall = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, wallHeight), wallMat);
      backWall.position.set(0, wallHeight / 2, -roomSize / 2);
      scene.add(backWall);

      const leftWall = backWall.clone();
      leftWall.rotation.y = Math.PI / 2;
      leftWall.position.set(-roomSize / 2, wallHeight / 2, 0);
      scene.add(leftWall);

      const rightWall = backWall.clone();
      rightWall.rotation.y = -Math.PI / 2;
      rightWall.position.set(roomSize / 2, wallHeight / 2, 0);
      scene.add(rightWall);

      const ceiling = new THREE.Mesh(
        new THREE.PlaneGeometry(roomSize, roomSize),
        new THREE.MeshStandardMaterial({ color: 0xdddddd, roughness: 0.9 })
      );
      ceiling.rotation.x = Math.PI / 2;
      ceiling.position.y = wallHeight;
      scene.add(ceiling);

      // --- Load animations from vamp.glb first, then apply to bones.glb ---
      const loader = new THREE.GLTFLoader();
      
      // Step 1: Load vamp.glb to extract animations
      loader.load(
        "models/horror/vamp.glb",
        (vampGltf) => {
          if (vampGltf.animations && vampGltf.animations.length > 0) {
            // Store all animations from the vamp model
            animationClips = vampGltf.animations;
            
            // Create better names for the animations
            animationNames = animationClips.map((clip, index) => {
              if (clip.name && clip.name !== 'mixamo.com') {
                return clip.name;
              }
              // Assign descriptive names based on index
              const names = ['Idle', 'Walk', 'Attack', 'Run', 'Jump', 'Death', 'Special1', 'Special2'];
              return names[index] || `Animation_${index + 1}`;
            });
            
            console.log(`&#9989; Loaded ${animationClips.length} animations from vamp.glb:`, animationNames);
            document.getElementById("loading").textContent = `Loaded ${animationClips.length} animations. Now loading bones model...`;
            
            // Step 2: Now load the bones model
            loadBonesModel();
          } else {
            console.warn("&#10060; No animations found in vamp.glb");
            document.getElementById("loading").textContent = "No animations found in vamp.glb. Loading bones model...";
            loadBonesModel();
          }
        },
        (xhr) => {
          document.getElementById("loading").textContent = `Loading vamp.glb animations... ${((xhr.loaded / xhr.total) * 100).toFixed(1)}%`;
        },
        (error) => {
          console.error("&#10060; Error loading vamp.glb:", error);
          document.getElementById("loading").textContent = "Failed to load vamp animations. Loading bones model...";
          loadBonesModel();
        }
      );

function loadBonesModel() {
  loader.load(
    "models/horror/bones.glb",
    (gltf) => {
      // Create a container group for the bones model
      const modelContainer = new THREE.Group();
      
      animatedModel = gltf.scene;
      
      // DEBUG: Check the model's bounding box
      const initialBox = new THREE.Box3().setFromObject(animatedModel);
      const initialSize = initialBox.getSize(new THREE.Vector3());
      console.log("Initial model size:", initialSize);
      
      // Add the bones model to the container
      modelContainer.add(animatedModel);
      
      // Scale the model itself
      animatedModel.scale.set(6, 6, 6);

      // ROTATE THE CONTAINER to stand upright
	modelContainer.rotation.set(
	  THREE.MathUtils.degToRad(-110),
	  THREE.MathUtils.degToRad(-180), 
	  THREE.MathUtils.degToRad(-180)
	);      // Position the container
      modelContainer.position.set(0, 0, 0);

      // --- ALIGN MODEL FEET TO FLOOR ---
      // Update the bounding box after scaling and rotation
      const updatedBox = new THREE.Box3().setFromObject(modelContainer);
      const heightOffset = updatedBox.min.y;
      modelContainer.position.y = -heightOffset; // Feet at floor level

      scene.add(modelContainer);

      // Create animation mixer for the bones model (not the container!)
      mixer = new THREE.AnimationMixer(animatedModel);

      // Apply animations from vamp.glb to bones model
      if (animationClips.length > 0) {
        playAnimation(0); // Start with first animation
        
        // Update instructions to show animation controls
        document.getElementById("instructions").innerHTML = 
          `Press 1-${Math.min(9, animationClips.length)} to switch animations. Current: ${animationNames[0]}`;
      } else {
        console.warn("No animations available to play");
      }

      document.getElementById("loading").style.display = "none";
      console.log("&#9989; bones.glb loaded with vamp animations");
    },
    (xhr) => {
      document.getElementById("loading").textContent = `Loading bones.glb... ${((xhr.loaded / xhr.total) * 100).toFixed(1)}%`;
    },
    (error) => {
      console.error("&#10060; Error loading bones.glb:", error);
      document.getElementById("loading").textContent = "Failed to load bones.glb";
    }
  );
}


function playAnimation(index) {
  if (!mixer || index >= animationClips.length) return;
  
  // Stop current animation
  if (currentAction) {
    currentAction.stop();
    mixer.stopAllAction();
  }
  
  // Get the animation clip from vamp.glb
  const clip = animationClips[index];
  
  // CRITICAL: Create a modified clip that removes scale tracks
  const tracksWithoutScale = clip.tracks.filter(track => 
    !track.name.includes('.scale') && 
    !track.name.includes('morphTargetInfluences')
  );
  
  const modifiedClip = new THREE.AnimationClip(
    clip.name,
    clip.duration,
    tracksWithoutScale
  );
  
  console.log(`Removed ${clip.tracks.length - tracksWithoutScale.length} scale tracks`);
  
  // Create action with modified clip (no scale tracks)
  currentAction = mixer.clipAction(modifiedClip);
  currentAction.reset();
  currentAction.setEffectiveTimeScale(1.0);
  currentAction.setEffectiveWeight(1.0);
  currentAction.setLoop(THREE.LoopRepeat, Infinity);
  currentAction.play();
  
  // Update UI
  document.getElementById("instructions").innerHTML = 
    `Press 1-${Math.min(9, animationClips.length)} to switch animations. Current: ${animationNames[index]}`;
  
  console.log(`&#127917; Playing animation ${index + 1}: ${animationNames[index]}`);
  console.log(`&#128202; Original tracks: ${clip.tracks.length}, Without scale: ${tracksWithoutScale.length}`);
}

      setupControls();
      window.addEventListener("resize", onWindowResize);

      // --- Exit page on ESC key ---
      document.addEventListener("keydown", (e) => {
        if (e.code === "Escape") {
          window.location.href = "about:blank";
        }
        
        // Animation switching with number keys 1-9
        if (e.code >= 'Digit1' && e.code <= 'Digit9') {
          const animationIndex = parseInt(e.code.replace('Digit', '')) - 1;
          if (animationIndex < animationClips.length) {
            playAnimation(animationIndex);
          }
        }
      });
    }

    // --- Smooth fine-grained movement controls ---
    function setupControls() {
      const moveState = { forward: false, backward: false, left: false, right: false };
      const velocity = new THREE.Vector3();
      const direction = new THREE.Vector3();
      let yaw = 0;
      let isMouseDown = false;
      let previousMouseX = 0;

      const moveSpeed = 0.03; // Fine movement speed

      document.addEventListener("mousedown", (e) => {
        isMouseDown = true;
        previousMouseX = e.clientX;
      });
      document.addEventListener("mouseup", () => (isMouseDown = false));

      document.addEventListener("mousemove", (e) => {
        if (!isMouseDown) return;
        const deltaX = e.clientX - previousMouseX;
        previousMouseX = e.clientX;
        yaw -= deltaX * 0.002; // smoother turning
        camera.rotation.y = yaw;
      });

      document.addEventListener("keydown", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = true; break;
          case "KeyW": moveState.backward = true; break;
          case "KeyD": moveState.left = true; break;
          case "KeyA": moveState.right = true; break;
          case "KeyR": resetCamera(); break;
        }
      });
      document.addEventListener("keyup", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = false; break;
          case "KeyW": moveState.backward = false; break;
          case "KeyD": moveState.left = false; break;
          case "KeyA": moveState.right = false; break;
        }
      });

      function resetCamera() {
        camera.position.set(0, EYE_HEIGHT, 5);
        camera.rotation.set(0, 0, 0);
        yaw = 0;
        velocity.set(0, 0, 0);
      }

      camera.userData.update = function () {
        velocity.x -= velocity.x * 0.15;
        velocity.z -= velocity.z * 0.15;

        direction.z = Number(moveState.forward) - Number(moveState.backward);
        direction.x = Number(moveState.right) - Number(moveState.left);
        direction.normalize();

        if (moveState.forward || moveState.backward) velocity.z -= direction.z * moveSpeed;
        if (moveState.left || moveState.right) velocity.x -= direction.x * moveSpeed;

        const forward = new THREE.Vector3(0, 0, -1).applyQuaternion(camera.quaternion);
        const right = new THREE.Vector3(1, 0, 0).applyQuaternion(camera.quaternion);
        forward.y = 0; right.y = 0;
        forward.normalize(); right.normalize();

        camera.position.add(forward.multiplyScalar(velocity.z));
        camera.position.add(right.multiplyScalar(velocity.x));
        camera.position.y = EYE_HEIGHT;
      };
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      if (mixer) mixer.update(delta);
      if (camera.userData.update) camera.userData.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>