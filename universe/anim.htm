<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Showroom - Bones with Animation</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
      font-family: Arial, sans-serif;
    }
    #info, #instructions, #loading {
      position: absolute;
      width: 100%;
      text-align: center;
      color: white;
      z-index: 10;
    }
    #info {
      top: 10px;
      background: rgba(0,0,0,0.5);
      padding: 5px;
    }
    #instructions {
      bottom: 20px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
    }
    #loading {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.7);
      padding: 20px;
      border-radius: 10px;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div id="info">3D Showroom | WASD: Move | Mouse: Look | R: Reset | ESC: Exit</div>
  <div id="instructions">Bones performing animation</div>
  <div id="loading">Loading bones.glb...</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

  <script>
    let scene, camera, renderer, mixer, animatedModel;
    const clock = new THREE.Clock();
    const EYE_HEIGHT = 1.7;

    init();
    animate();

    function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, EYE_HEIGHT, 5);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x202020);
      document.body.appendChild(renderer.domElement);

      // --- Lighting: brighter & even ---
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
      hemiLight.position.set(0, 20, 0);
      scene.add(hemiLight);

      const ambient = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambient);

      const dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
      dirLight.position.set(5, 10, 7.5);
      dirLight.castShadow = true;
      scene.add(dirLight);

      // --- Room setup ---
      const roomSize = 50;
      const wallHeight = 10;

      const floorMat = new THREE.MeshStandardMaterial({ color: 0x555555, roughness: 0.3 });
      const floor = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, roomSize), floorMat);
      floor.rotation.x = -Math.PI / 2;
      scene.add(floor);

      const wallMat = new THREE.MeshStandardMaterial({ color: 0xaaaaaa, roughness: 0.6 });
      const backWall = new THREE.Mesh(new THREE.PlaneGeometry(roomSize, wallHeight), wallMat);
      backWall.position.set(0, wallHeight / 2, -roomSize / 2);
      scene.add(backWall);

      const leftWall = backWall.clone();
      leftWall.rotation.y = Math.PI / 2;
      leftWall.position.set(-roomSize / 2, wallHeight / 2, 0);
      scene.add(leftWall);

      const rightWall = backWall.clone();
      rightWall.rotation.y = -Math.PI / 2;
      rightWall.position.set(roomSize / 2, wallHeight / 2, 0);
      scene.add(rightWall);

      const ceiling = new THREE.Mesh(
        new THREE.PlaneGeometry(roomSize, roomSize),
        new THREE.MeshStandardMaterial({ color: 0xdddddd, roughness: 0.9 })
      );
      ceiling.rotation.x = Math.PI / 2;
      ceiling.position.y = wallHeight;
      scene.add(ceiling);

      // --- Load bones model and animation ---
      const loader = new THREE.GLTFLoader();
      
      // Load bones model first
loadModel("models/horror/zombina.glb", "chacha");
      

function loadModel(modelPath, initialAnimation = 'floss') {
  loader.load(
    modelPath,
    (gltf) => {
      // CREATE CONTAINER
      const modelContainer = new THREE.Group();
      
      animatedModel = gltf.scene;
      
      // Add model to container
      modelContainer.add(animatedModel);
      
      // Scale the model
      animatedModel.scale.set(6, 6, 6);

      // ROTATE CONTAINER based on model type
const modelName = modelPath.split('/').pop(); // Get filename like 'witch.glb'

if (modelName.includes('witch') || modelName.includes('vamp') || modelName.includes('zombina')) {
  // Witch/Vampire rotation
  modelContainer.rotation.set(
    THREE.MathUtils.degToRad(180),
    THREE.MathUtils.degToRad(-180), 
    THREE.MathUtils.degToRad(-180)
  );
} else {
  // Default rotation for all other models
  modelContainer.rotation.set(
    THREE.MathUtils.degToRad(-100),
    THREE.MathUtils.degToRad(-180), 
    THREE.MathUtils.degToRad(-180)
  );
}
      // Position the container
      modelContainer.position.set(0, 0, 0);

      // --- ALIGN MODEL FEET TO FLOOR ---
      const updatedBox = new THREE.Box3().setFromObject(modelContainer);
      const heightOffset = updatedBox.min.y;
      modelContainer.position.y = -heightOffset;

      // Add container to scene instead of model directly
      scene.add(modelContainer);

      // Create animation mixer for the model
      mixer = new THREE.AnimationMixer(animatedModel);

      // Load initial animation
      loadAnim(initialAnimation);

      document.getElementById("loading").style.display = "none";
      console.log(`&#9989; ${modelPath} loaded in container`);
    },
    (xhr) => {
      const fileName = modelPath.split('/').pop();
      document.getElementById("loading").textContent = `Loading ${fileName}... ${((xhr.loaded / xhr.total) * 100).toFixed(1)}%`;
    },
    (error) => {
      console.error(`&#10060; Error loading ${modelPath}:`, error);
      document.getElementById("loading").textContent = `Failed to load ${modelPath}`;
    }
  );
}

let currentAction = null;
const TRANSITION_DURATION = 0.3;

function loadAnim(animName) {
  console.log(`&#128260; Starting loadAnim for: ${animName}`);
  
  // Store reference to current action BEFORE starting the fetch
  const previousAction = currentAction;
  
  // If we have a current action, log its state
  if (previousAction) {
    console.log(`&#128202; Previous action:`, {
      isRunning: previousAction.isRunning(),
      time: previousAction.time,
      weight: previousAction.getEffectiveWeight()
    });
  }
  
  // Use cached fetch to avoid re-downloading
  const startTime = performance.now();
  
  fetch(`animations/${animName}.json`)
    .then(response => {
      console.log(`&#128229; JSON fetch completed in ${(performance.now() - startTime).toFixed(2)}ms`);
      if (!response.ok) {
        throw new Error(`Failed to load ${animName}.json`);
      }
      return response.json();
    })
    .then(animationData => {
      const parseStartTime = performance.now();
      
      // Filter out problematic tracks - REMOVE ROOT BONE ROTATIONS
      const tracks = animationData.tracks.map(trackData => {
        // Remove ALL scale tracks
        if (trackData.name.includes('.scale')) {
          return null;
        }
        
        // Remove root bone rotations that cause flipping
if (trackData.name.includes('.quaternion')) {
    const boneName = trackData.name.split('.')[0]; // Extract bone name
    if (boneName.includes('Char_01') || boneName === 'Bone') {
        return null;
    }
}
        
        return new THREE.KeyframeTrack(
          trackData.name,
          new Float32Array(trackData.times),
          new Float32Array(trackData.values)
        );
      }).filter(track => track !== null);
      
      const clip = new THREE.AnimationClip(
        animationData.name,
        animationData.duration,
        tracks
      );
      
      console.log(`&#9889; JSON parsed and clip created in ${(performance.now() - parseStartTime).toFixed(2)}ms`);
      
      // Create new animation action
      const newAction = mixer.clipAction(clip);
      newAction.setLoop(THREE.LoopRepeat, Infinity);
      
      // Handle transitions between animations
      if (previousAction && previousAction.isRunning()) {
        console.log(`&#127917; Starting crossfade from previous action`);
        
        // KEEP THE PREVIOUS ACTION PLAYING during crossfade
        newAction.play();
        
        // Use manual crossfade since crossFadeTo might not work as expected
        newAction.setEffectiveWeight(0);
        previousAction.setEffectiveWeight(1);
        
        // Gradually crossfade over TRANSITION_DURATION
        let fadeStartTime = performance.now();
        function doCrossfade() {
          const elapsed = (performance.now() - fadeStartTime) / 1000;
          const progress = Math.min(elapsed / TRANSITION_DURATION, 1);
          
          newAction.setEffectiveWeight(progress);
          previousAction.setEffectiveWeight(1 - progress);
          
          if (progress < 1) {
            requestAnimationFrame(doCrossfade);
          } else {
            // Crossfade complete - stop the old action
            previousAction.stop();
            console.log(`&#9989; Crossfade completed`);
          }
        }
        
        doCrossfade();
        
      } else {
        // First animation or previous action not running
        console.log(`&#127916; Playing new animation directly`);
        newAction.play();
        newAction.setEffectiveWeight(1);
      }
      
      // Update current action reference
      currentAction = newAction;
      
      console.log(`&#9989; ${animName} animation fully loaded and playing`);
      document.getElementById("instructions").innerHTML = `Bones performing ${animName} animation`;
      
    })
    .catch(error => {
      console.error(`&#10060; Error loading ${animName} animation:`, error);
      document.getElementById("instructions").innerHTML = "Failed to load animation";
    });
}

      setupControls();
      window.addEventListener("resize", onWindowResize);

      // --- Exit page on ESC key ---
      document.addEventListener("keydown", (e) => {
        if (e.code === "Escape") {
          window.location.href = "about:blank";
        }
      });
    }

    // --- Smooth fine-grained movement controls ---
    function setupControls() {
      const moveState = { forward: false, backward: false, left: false, right: false };
      const velocity = new THREE.Vector3();
      const direction = new THREE.Vector3();
      let yaw = 0;
      let isMouseDown = false;
      let previousMouseX = 0;

      const moveSpeed = 0.03;

      document.addEventListener("mousedown", (e) => {
        isMouseDown = true;
        previousMouseX = e.clientX;
      });
      document.addEventListener("mouseup", () => (isMouseDown = false));

      document.addEventListener("mousemove", (e) => {
        if (!isMouseDown) return;
        const deltaX = e.clientX - previousMouseX;
        previousMouseX = e.clientX;
        yaw -= deltaX * 0.002;
        camera.rotation.y = yaw;
      });

      document.addEventListener("keydown", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = true; break;
          case "KeyW": moveState.backward = true; break;
          case "KeyD": moveState.left = true; break;
          case "KeyA": moveState.right = true; break;
          case "KeyR": resetCamera(); break;
        }
      });
      document.addEventListener("keyup", (e) => {
        switch (e.code) {
          case "KeyS": moveState.forward = false; break;
          case "KeyW": moveState.backward = false; break;
          case "KeyD": moveState.left = false; break;
          case "KeyA": moveState.right = false; break;
        }
      });

      function resetCamera() {
        camera.position.set(0, EYE_HEIGHT, 5);
        camera.rotation.set(0, 0, 0);
        yaw = 0;
        velocity.set(0, 0, 0);
      }

      camera.userData.update = function () {
        velocity.x -= velocity.x * 0.15;
        velocity.z -= velocity.z * 0.15;

        direction.z = Number(moveState.forward) - Number(moveState.backward);
        direction.x = Number(moveState.right) - Number(moveState.left);
        direction.normalize();

        if (moveState.forward || moveState.backward) velocity.z -= direction.z * moveSpeed;
        if (moveState.left || moveState.right) velocity.x -= direction.x * moveSpeed;

        const forward = new THREE.Vector3(0, 0, -1).applyQuaternion(camera.quaternion);
        const right = new THREE.Vector3(1, 0, 0).applyQuaternion(camera.quaternion);
        forward.y = 0; right.y = 0;
        forward.normalize(); right.normalize();

        camera.position.add(forward.multiplyScalar(velocity.z));
        camera.position.add(right.multiplyScalar(velocity.x));
        camera.position.y = EYE_HEIGHT;
      };
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      if (mixer) mixer.update(delta);
      if (camera.userData.update) camera.userData.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>