<html>
  <head>
    <script src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script src="dist/aframe-chromakey-material.min.js"></script>
    <style>
      #ar-scene {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      
      #start-button {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 15px 30px;
        font-size: 18px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        z-index: 1000;
      }
    </style>
  </head>

  <body style="margin: 0px; overflow: hidden;">
    <button id="start-button">Start AR Experience</button>

    <a-scene id="ar-scene" 
             arjs="debugUIEnabled: false; 
                   sourceType: webcam;
                   patternRatio: 0.95;"
             embedded
             style="visibility: hidden; position: fixed; top: 0; left: 0;">
    
      <!-- Main trex Marker -->
      <a-marker type="pattern" url="patts/dinos/trex-bg.patt" id="marker-trex">
        <a-plane
          material="shader: chromakey; src: #video-trex; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/trice-bg.patt" id="marker-trice">
        <a-plane
          material="shader: chromakey; src: #video-trice; color: 0.1 0.9 0.2"
          position="0 0 -0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/compy-bg.patt" id="marker-compy">
        <a-plane
          material="shader: chromakey; src: #video-compy; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/stego-bg.patt" id="marker-stego">
        <a-plane
          material="shader: chromakey; src: #video-stego; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/anky-bg.patt" id="marker-anky">
        <a-plane
          material="shader: chromakey; src: #video-anky; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/dilo-bg.patt" id="marker-dilo">
        <a-plane
          material="shader: chromakey; src: #video-dilo; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/ptera-bg.patt" id="marker-ptera">
        <a-plane
          material="shader: chromakey; src: #video-ptera; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/brachio-bg.patt" id="marker-brachio">
        <a-plane
          material="shader: chromakey; src: #video-brachio; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/spino-bg.patt" id="marker-spino">
        <a-plane
          material="shader: chromakey; src: #video-spino; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-marker type="pattern" url="patts/dinos/para-bg.patt" id="marker-para">
        <a-plane
          material="shader: chromakey; src: #video-para; color: 0.1 0.9 0.2"
          position="0 0 0.1"
          rotation="-90 0 0"
          width="1.5"
          height="1.2"
          class="orientation-dependent"
        ></a-plane>
      </a-marker>

      <a-entity camera></a-entity>
    </a-scene>

    <!-- Hidden Video Elements -->
    <video
      id="video-trex"
      src="videos/booklet-dinos/trex.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-trice"
      src="videos/booklet-dinos/trice.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-compy"
      src="videos/booklet-dinos/compy.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-stego"
      src="videos/booklet-dinos/stego.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-anky"
      src="videos/booklet-dinos/anky.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-dilo"
      src="videos/booklet-dinos/dilo.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-ptera"
      src="videos/booklet-dinos/ptera.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-brachio"
      src="videos/booklet-dinos/brachio.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-spino"
      src="videos/booklet-dinos/spino.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <video
      id="video-para"
      src="videos/booklet-dinos/para.mp4"
      loop
      autoplay
      muted
      playsinline
      style="opacity: 0;"
    ></video>

    <script>
      let currentOrientation = 'unknown';
      let arInitialized = false;
      const activeVideos = new Map();
      
      let startButton, arScene;
      
      window.addEventListener("DOMContentLoaded", function () {
        startButton = document.getElementById('start-button');
        arScene = document.getElementById('ar-scene');

        // Orientation detection (running in background for size adjustments)
        detectOrientation();
        window.addEventListener('resize', detectOrientation);
        window.addEventListener('orientationchange', detectOrientation);
        setInterval(detectOrientation, 1000);

        // Start button click handler
        startButton.addEventListener('click', function() {
          startButton.style.display = 'none';
          arScene.style.visibility = 'visible';
          
          setTimeout(() => {
            initializeAR();
          }, 100);
        });

        // Set up basic marker events immediately
        setupBasicMarkerEvents();
      });
      
      function detectOrientation() {
        if (typeof window.orientation !== 'undefined') {
          currentOrientation = Math.abs(window.orientation) === 90 ? 'landscape' : 'portrait';
        } 
        else if (window.screen && window.screen.orientation && window.screen.orientation.type) {
          currentOrientation = window.screen.orientation.type.includes('landscape') ? 'landscape' : 'portrait';
        }
        else {
          currentOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';
        }
        
        if (arInitialized) {
          updatePlaneDimensions();
        }
        
        return currentOrientation;
      }
      
      function updatePlaneDimensions() {
        const planeSizes = {
          'portrait': {
            'marker-trex': { width: '4', height: '3.2' },
            'marker-trice': { width: '3.8', height: '3.0' },
            'marker-compy': { width: '4.2', height: '3.4' },
            'marker-stego': { width: '4.1', height: '3.3' },
            'marker-anky': { width: '3.9', height: '3.1' },
            'marker-dilo': { width: '3.7', height: '2.9' },
            'marker-ptera': { width: '4.0', height: '3.2' },
            'marker-brachio': { width: '4.4', height: '3.6' },
            'marker-spino': { width: '4.4', height: '3.6' },
            'marker-para': { width: '4.4', height: '3.6' }
          },
          'landscape': {
            'marker-trex': { width: '1.5', height: '1.2' },
            'marker-trice': { width: '1.4', height: '1.1' },
            'marker-compy': { width: '1.6', height: '1.3' },
            'marker-stego': { width: '1.55', height: '1.25' },
            'marker-anky': { width: '1.45', height: '1.15' },
            'marker-dilo': { width: '1.35', height: '1.05' },
            'marker-ptera': { width: '1.5', height: '1.2' },
            'marker-brachio': { width: '1.7', height: '1.4' },
            'marker-spino': { width: '1.7', height: '1.4' },
            'marker-para': { width: '1.7', height: '1.4' }
          }
        };

        const planes = document.querySelectorAll('.orientation-dependent');
        
        planes.forEach(plane => {
          const markerId = plane.parentElement.id;
          const sizes = planeSizes[currentOrientation][markerId];
          
          if (sizes) {
            plane.setAttribute('width', sizes.width);
            plane.setAttribute('height', sizes.height);
          }
        });
      }
      
      function initializeAR() {
        // Force AR.js to reinitialize
        if (arScene.components.arjs) {
          arScene.components.arjs.pause();
          arScene.components.arjs.play();
        }
        
        window.dispatchEvent(new Event('resize'));
        
        arInitialized = true;
        updatePlaneDimensions();
        
        // Switch to advanced features
        setupAdvancedMarkerEvents();
      }
      
      function setupBasicMarkerEvents() {
        // Set up events for ALL markers
        const markers = [
          { id: 'marker-trex', videoId: 'video-trex' },
          { id: 'marker-trice', videoId: 'video-trice' },
          { id: 'marker-compy', videoId: 'video-compy' },
          { id: 'marker-stego', videoId: 'video-stego' },
          { id: 'marker-anky', videoId: 'video-anky' },
          { id: 'marker-dilo', videoId: 'video-dilo' },
          { id: 'marker-ptera', videoId: 'video-ptera' },
          { id: 'marker-brachio', videoId: 'video-brachio' },
          { id: 'marker-spino', videoId: 'video-spino' },
          { id: 'marker-para', videoId: 'video-para' }
        ];

        markers.forEach(({ id, videoId }) => {
          const marker = document.querySelector(`#${id}`);
          const video = document.querySelector(`#${videoId}`);
          
          if (marker && video) {
            marker.addEventListener("markerFound", function () {
              video.muted = false;
            });
            marker.addEventListener("markerLost", function () {
              video.muted = true;
            });
            
            // Start all videos muted
            video.play().catch(e => console.log(`${videoId} play error:`, e));
          }
        });
      }

      function setupAdvancedMarkerEvents() {
        const markers = [
          { id: 'marker-trex', videoId: 'video-trex' },
          { id: 'marker-trice', videoId: 'video-trice' },
          { id: 'marker-compy', videoId: 'video-compy' },
          { id: 'marker-stego', videoId: 'video-stego' },
          { id: 'marker-anky', videoId: 'video-anky' },
          { id: 'marker-dilo', videoId: 'video-dilo' },
          { id: 'marker-ptera', videoId: 'video-ptera' },
          { id: 'marker-brachio', videoId: 'video-brachio' },
          { id: 'marker-spino', videoId: 'video-spino' },
          { id: 'marker-para', videoId: 'video-para' }
        ];

        markers.forEach(({ id, videoId }) => {
          const marker = document.querySelector(`#${id}`);
          const video = document.querySelector(`#${videoId}`);
          
          if (marker && video) {
            // Remove basic events
            marker.removeEventListener("markerFound", null);
            marker.removeEventListener("markerLost", null);

            // Advanced events with buffering
            marker.addEventListener("markerFound", function () {
              if (this.deactivationTimeout) {
                clearTimeout(this.deactivationTimeout);
                this.deactivationTimeout = null;
              }
              activateVideo(video, id);
            });
            
            marker.addEventListener("markerLost", function () {
              this.deactivationTimeout = setTimeout(() => {
                deactivateVideo(video, id);
              }, 1000);
            });
          }
        });
      }
      
      function activateVideo(video, videoName) {
        video.muted = false;
        
        if (activeVideos.has(video)) {
          video.play().catch(e => console.log(`Playback ensure failed:`, e));
          return;
        }
        
        activeVideos.set(video, { name: videoName });
        
        const playVideo = () => {
          video.play().catch(e => {
            setTimeout(playVideo, 500);
          });
        };
        
        playVideo();
      }
      
      function deactivateVideo(video, videoName) {
        if (!activeVideos.has(video)) return;
        video.muted = true;
      }
    </script>
  </body>
</html>